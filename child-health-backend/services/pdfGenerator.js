const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

class HealthBookletGenerator {
  constructor() {
    this.doc = null;
    this.margin = 50;
    this.currentY = 0;
  }

  async generateBooklet(childData, outputPath = null) {
    this.doc = new PDFDocument({
      size: 'A4',
      margin: this.margin,
      info: {
        Title: `Health Booklet - ${childData.childName}`,
        Author: 'Child Health Record System',
        Subject: 'Child Health Record Booklet',
        Keywords: 'health, child, booklet, medical, record'
      }
    });

    // Set up the PDF stream
    let chunks = [];
    if (outputPath) {
      this.doc.pipe(fs.createWriteStream(outputPath));
    } else {
      this.doc.on('data', chunk => chunks.push(chunk));
    }

    // Generate the booklet content
    await this.generateCoverPage(childData);
    this.doc.addPage();
    await this.generateHealthSummary(childData);
    this.doc.addPage();
    await this.generateMedicalHistory(childData);
    this.doc.addPage();
    await this.generateNutritionData(childData);
    this.doc.addPage();
    await this.generateGrowthChart(childData);
    
    // Finalize the PDF
    this.doc.end();

    if (!outputPath) {
      return new Promise((resolve, reject) => {
        this.doc.on('end', () => {
          const pdfBuffer = Buffer.concat(chunks);
          resolve(pdfBuffer);
        });
        this.doc.on('error', reject);
      });
    }

    return outputPath;
  }

  async generateCoverPage(childData) {
    const pageWidth = this.doc.page.width - 2 * this.margin;
    let y = this.margin;

    // Header
    this.doc
      .fontSize(24)
      .fillColor('#3b82f6')
      .text('CHILD HEALTH RECORD BOOKLET', this.margin, y, {
        align: 'center',
        width: pageWidth
      });

    y += 60;

    // Child photo placeholder or actual photo
    if (childData.photo) {
      try {
        // Add photo if available (base64 or file path)
        const photoData = childData.photo.startsWith('data:') 
          ? childData.photo.split(',')[1] 
          : childData.photo;
        
        const photoBuffer = Buffer.from(photoData, 'base64');
        this.doc.image(photoBuffer, this.margin + 150, y, {
          width: 120,
          height: 120
        });
      } catch (error) {
        // Fallback to placeholder
        this.addPhotoPlaceholder(this.margin + 150, y, 120, 120);
      }
    } else {
      this.addPhotoPlaceholder(this.margin + 150, y, 120, 120);
    }

    y += 140;

    // Child information
    this.doc
      .fontSize(18)
      .fillColor('#000')
      .text('Child Information', this.margin, y, { underline: true });

    y += 30;

    const infoData = [
      ['Name:', childData.childName || 'N/A'],
      ['Health ID:', childData.healthId || 'N/A'],
      ['Age:', `${childData.age || 'N/A'} years`],
      ['Parent/Guardian:', childData.parentName || 'N/A'],
      ['Date of Record:', new Date(childData.timestamp || Date.now()).toLocaleDateString()],
      ['Representative ID:', childData.representativeId || 'N/A']
    ];

    this.doc.fontSize(12);
    infoData.forEach(([label, value]) => {
      this.doc
        .fillColor('#666')
        .text(label, this.margin, y, { width: 150, continued: true })
        .fillColor('#000')
        .text(value, { width: pageWidth - 150 });
      y += 25;
    });

    // Footer
    y = this.doc.page.height - 100;
    this.doc
      .fontSize(10)
      .fillColor('#888')
      .text('Generated by Child Health Record System', this.margin, y, {
        align: 'center',
        width: pageWidth
      })
      .text(`Generated on: ${new Date().toLocaleString()}`, this.margin, y + 15, {
        align: 'center',
        width: pageWidth
      });
  }

  async generateHealthSummary(childData) {
    const pageWidth = this.doc.page.width - 2 * this.margin;
    let y = this.margin;

    // Header
    this.doc
      .fontSize(20)
      .fillColor('#3b82f6')
      .text('Health Summary', this.margin, y);

    y += 40;

    // Physical measurements
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Physical Measurements', this.margin, y, { underline: true });

    y += 25;

    const measurements = [
      ['Weight:', `${childData.weight || 'N/A'} kg`],
      ['Height:', `${childData.height || 'N/A'} cm`],
      ['BMI:', this.calculateBMI(childData.weight, childData.height)],
      ['BMI Category:', this.getBMICategory(this.calculateBMI(childData.weight, childData.height))]
    ];

    this.doc.fontSize(12);
    measurements.forEach(([label, value]) => {
      this.doc
        .fillColor('#666')
        .text(label, this.margin, y, { width: 120, continued: true })
        .fillColor('#000')
        .text(value, { width: pageWidth - 120 });
      y += 20;
    });

    y += 30;

    // Health indicators
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Health Indicators', this.margin, y, { underline: true });

    y += 25;

    // Malnutrition signs
    this.doc
      .fontSize(12)
      .fillColor('#666')
      .text('Visible Signs of Malnutrition:', this.margin, y);
    
    y += 15;
    
    const malnutritionText = childData.malnutritionSigns && childData.malnutritionSigns !== 'N/A' 
      ? childData.malnutritionSigns 
      : 'No visible signs of malnutrition observed.';
    
    this.doc
      .fillColor('#000')
      .text(malnutritionText, this.margin + 20, y, {
        width: pageWidth - 20,
        align: 'justify'
      });

    y += this.doc.heightOfString(malnutritionText, { width: pageWidth - 20 }) + 20;

    // Recent illnesses
    this.doc
      .fontSize(12)
      .fillColor('#666')
      .text('Recent Illnesses:', this.margin, y);
    
    y += 15;
    
    const illnessText = childData.recentIllnesses && childData.recentIllnesses !== 'N/A' 
      ? childData.recentIllnesses 
      : 'No recent illnesses reported.';
    
    this.doc
      .fillColor('#000')
      .text(illnessText, this.margin + 20, y, {
        width: pageWidth - 20,
        align: 'justify'
      });

    // Health recommendations
    y += this.doc.heightOfString(illnessText, { width: pageWidth - 20 }) + 40;

    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Health Recommendations', this.margin, y, { underline: true });

    y += 25;

    const recommendations = this.generateHealthRecommendations(childData);
    
    this.doc.fontSize(11);
    recommendations.forEach((recommendation, index) => {
      this.doc
        .fillColor('#000')
        .text(`${index + 1}. ${recommendation}`, this.margin + 10, y, {
          width: pageWidth - 10,
          align: 'justify'
        });
      y += this.doc.heightOfString(`${index + 1}. ${recommendation}`, { width: pageWidth - 10 }) + 10;
    });
  }

  async generateMedicalHistory(childData) {
    const pageWidth = this.doc.page.width - 2 * this.margin;
    let y = this.margin;

    // Header
    this.doc
      .fontSize(20)
      .fillColor('#3b82f6')
      .text('Medical History & Records', this.margin, y);

    y += 40;

    // Consent information
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Consent & Legal Information', this.margin, y, { underline: true });

    y += 25;

    this.doc
      .fontSize(12)
      .fillColor(childData.parentalConsent ? '#22c55e' : '#ef4444')
      .text('Parental Consent Status:', this.margin, y, { continued: true })
      .text(childData.parentalConsent ? ' GRANTED ✓' : ' NOT GRANTED ✗');

    y += 25;

    this.doc
      .fontSize(10)
      .fillColor('#666')
      .text('Data Collection Authorization: This record was created with proper parental/guardian consent for health monitoring and nutrition program purposes.', this.margin, y, {
        width: pageWidth,
        align: 'justify'
      });

    y += 50;

    // Location information
    if (childData.location && (childData.location.latitude || childData.location.address)) {
      this.doc
        .fontSize(16)
        .fillColor('#000')
        .text('Location Information', this.margin, y, { underline: true });

      y += 25;

      if (childData.location.address) {
        this.doc
          .fontSize(12)
          .fillColor('#666')
          .text('Address:', this.margin, y, { continued: true })
          .fillColor('#000')
          .text(` ${childData.location.address}`);
        y += 20;
      }

      if (childData.location.latitude) {
        this.doc
          .fontSize(12)
          .fillColor('#666')
          .text('Coordinates:', this.margin, y, { continued: true })
          .fillColor('#000')
          .text(` ${childData.location.latitude.toFixed(6)}, ${childData.location.longitude.toFixed(6)}`);
        y += 20;
      }

      y += 20;
    }

    // Record metadata
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Record Metadata', this.margin, y, { underline: true });

    y += 25;

    const metadata = [
      ['Record Created:', new Date(childData.timestamp || Date.now()).toLocaleString()],
      ['Last Modified:', childData.lastModified ? new Date(childData.lastModified).toLocaleString() : 'N/A'],
      ['Upload Status:', childData.uploaded ? 'Uploaded to Server' : 'Pending Upload'],
      ['Sync Status:', childData.syncStatus || 'Unknown']
    ];

    this.doc.fontSize(12);
    metadata.forEach(([label, value]) => {
      this.doc
        .fillColor('#666')
        .text(label, this.margin, y, { width: 150, continued: true })
        .fillColor('#000')
        .text(value, { width: pageWidth - 150 });
      y += 20;
    });
  }

  async generateNutritionData(childData) {
    const pageWidth = this.doc.page.width - 2 * this.margin;
    let y = this.margin;

    // Header
    this.doc
      .fontSize(20)
      .fillColor('#3b82f6')
      .text('Nutrition Assessment', this.margin, y);

    y += 40;

    // BMI Analysis
    const bmi = this.calculateBMI(childData.weight, childData.height);
    const bmiCategory = this.getBMICategory(bmi);
    
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Body Mass Index (BMI) Analysis', this.margin, y, { underline: true });

    y += 25;

    this.doc
      .fontSize(14)
      .fillColor('#666')
      .text('Current BMI:', this.margin, y, { continued: true })
      .fillColor(this.getBMIColor(bmiCategory))
      .text(` ${bmi} kg/m² (${bmiCategory})`);

    y += 30;

    // BMI interpretation
    this.addBMIInterpretation(y, bmiCategory, pageWidth);
    y += 120;

    // Nutrition recommendations
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Nutrition Recommendations', this.margin, y, { underline: true });

    y += 25;

    const nutritionAdvice = this.getNutritionRecommendations(childData, bmiCategory);
    
    this.doc.fontSize(11);
    nutritionAdvice.forEach((advice, index) => {
      this.doc
        .fillColor('#000')
        .text(`• ${advice}`, this.margin + 10, y, {
          width: pageWidth - 10,
          align: 'justify'
        });
      y += this.doc.heightOfString(`• ${advice}`, { width: pageWidth - 10 }) + 8;
    });
  }

  async generateGrowthChart(childData) {
    const pageWidth = this.doc.page.width - 2 * this.margin;
    let y = this.margin;

    // Header
    this.doc
      .fontSize(20)
      .fillColor('#3b82f6')
      .text('Growth Chart & Future Tracking', this.margin, y);

    y += 40;

    // Current measurements table
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Current Measurements', this.margin, y, { underline: true });

    y += 25;

    // Draw a simple table
    this.drawMeasurementTable(y, childData);
    y += 120;

    // Future appointments section
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Recommended Follow-up Schedule', this.margin, y, { underline: true });

    y += 25;

    const followUpSchedule = [
      'Next health check: 3 months from record date',
      'Weight and height monitoring: Monthly',
      'Nutritional assessment: Every 6 months',
      'Development milestone check: As per age guidelines'
    ];

    this.doc.fontSize(12);
    followUpSchedule.forEach(item => {
      this.doc
        .fillColor('#000')
        .text(`• ${item}`, this.margin + 10, y);
      y += 20;
    });

    y += 30;

    // Emergency contacts section
    this.doc
      .fontSize(16)
      .fillColor('#000')
      .text('Emergency Contacts & Resources', this.margin, y, { underline: true });

    y += 25;

    this.doc
      .fontSize(12)
      .fillColor('#000')
      .text('In case of health emergencies or concerns, contact:', this.margin, y);

    y += 20;

    const emergencyInfo = [
      'Local Health Center: [Contact Information]',
      'Emergency Services: [Emergency Number]',
      'Nutrition Helpline: [Helpline Number]',
      'Child Health Services: [Service Contact]'
    ];

    emergencyInfo.forEach(info => {
      this.doc
        .fillColor('#000')
        .text(`• ${info}`, this.margin + 10, y);
      y += 18;
    });
  }

  // Helper methods
  addPhotoPlaceholder(x, y, width, height) {
    this.doc
      .rect(x, y, width, height)
      .stroke('#ccc')
      .fillColor('#f0f0f0')
      .rect(x, y, width, height)
      .fill()
      .fillColor('#999')
      .fontSize(10)
      .text('Photo', x + width/2 - 15, y + height/2 - 5);
  }

  calculateBMI(weight, height) {
    if (!weight || !height) return 'N/A';
    const heightInM = height / 100;
    const bmi = weight / (heightInM * heightInM);
    return bmi.toFixed(1);
  }

  getBMICategory(bmi) {
    if (bmi === 'N/A') return 'Unable to determine';
    const bmiValue = parseFloat(bmi);
    if (bmiValue < 18.5) return 'Underweight';
    if (bmiValue < 25) return 'Normal weight';
    if (bmiValue < 30) return 'Overweight';
    return 'Obese';
  }

  getBMIColor(category) {
    switch (category) {
      case 'Normal weight': return '#22c55e';
      case 'Underweight': return '#ef4444';
      case 'Overweight': return '#f59e0b';
      case 'Obese': return '#dc2626';
      default: return '#666';
    }
  }

  addBMIInterpretation(y, category, pageWidth) {
    const interpretations = {
      'Underweight': 'BMI below 18.5 may indicate undernutrition. Consult healthcare provider for proper nutrition plan.',
      'Normal weight': 'BMI within healthy range. Continue current nutrition and activity levels.',
      'Overweight': 'BMI above normal range. Consider dietary adjustments and increased physical activity.',
      'Obese': 'BMI indicates obesity. Medical consultation recommended for appropriate intervention.'
    };

    const interpretation = interpretations[category] || 'BMI assessment requires medical consultation.';
    
    this.doc
      .fontSize(12)
      .fillColor('#000')
      .text(interpretation, this.margin, y, {
        width: pageWidth,
        align: 'justify'
      });
  }

  generateHealthRecommendations(childData) {
    const recommendations = [];
    const bmi = this.calculateBMI(childData.weight, childData.height);
    const bmiCategory = this.getBMICategory(bmi);

    // Age-based recommendations
    if (childData.age < 2) {
      recommendations.push('Ensure exclusive breastfeeding for first 6 months if applicable');
      recommendations.push('Monitor developmental milestones closely');
    } else if (childData.age < 5) {
      recommendations.push('Provide balanced diet with adequate protein and vitamins');
      recommendations.push('Ensure regular vaccination schedule is followed');
    } else {
      recommendations.push('Encourage physical activity and outdoor play');
      recommendations.push('Maintain regular meal times with nutritious food');
    }

    // BMI-based recommendations
    if (bmiCategory === 'Underweight') {
      recommendations.push('Increase caloric intake with nutrient-dense foods');
      recommendations.push('Consult nutritionist for meal planning');
    } else if (bmiCategory === 'Overweight' || bmiCategory === 'Obese') {
      recommendations.push('Focus on portion control and reduced sugar intake');
      recommendations.push('Increase physical activity gradually');
    }

    // Health condition-based recommendations
    if (childData.malnutritionSigns && childData.malnutritionSigns !== 'N/A') {
      recommendations.push('Immediate medical evaluation for malnutrition signs');
      recommendations.push('Consider supplementation as per medical advice');
    }

    if (childData.recentIllnesses && childData.recentIllnesses !== 'N/A') {
      recommendations.push('Monitor for recurring health issues');
      recommendations.push('Boost immune system with proper nutrition');
    }

    recommendations.push('Regular health check-ups every 3-6 months');
    recommendations.push('Maintain hygiene and sanitation practices');

    return recommendations;
  }

  getNutritionRecommendations(childData, bmiCategory) {
    const recommendations = [];

    // General nutrition
    recommendations.push('Provide variety of fruits and vegetables daily');
    recommendations.push('Ensure adequate protein from appropriate sources');
    recommendations.push('Include whole grains and legumes in diet');
    recommendations.push('Maintain proper hydration with clean water');

    // Age-specific nutrition
    if (childData.age < 2) {
      recommendations.push('Continue breastfeeding alongside complementary foods');
      recommendations.push('Introduce new foods gradually and safely');
    } else if (childData.age < 5) {
      recommendations.push('Focus on iron-rich foods to prevent anemia');
      recommendations.push('Limit processed foods and added sugars');
    } else {
      recommendations.push('Teach healthy eating habits and food choices');
      recommendations.push('Include calcium-rich foods for bone development');
    }

    // BMI-specific nutrition advice
    if (bmiCategory === 'Underweight') {
      recommendations.push('Increase frequency of meals and healthy snacks');
      recommendations.push('Add healthy fats like nuts and seeds (age-appropriate)');
      recommendations.push('Consider nutritional supplements if medically advised');
    } else if (bmiCategory === 'Overweight' || bmiCategory === 'Obese') {
      recommendations.push('Focus on vegetables and lean proteins');
      recommendations.push('Reduce portion sizes gradually');
      recommendations.push('Eliminate sugary drinks and replace with water');
    }

    return recommendations;
  }

  drawMeasurementTable(y, childData) {
    const startX = this.margin;
    const tableWidth = this.doc.page.width - 2 * this.margin;
    const rowHeight = 25;
    const colWidth = tableWidth / 3;

    const measurements = [
      ['Measurement', 'Current Value', 'Reference Range'],
      ['Weight', `${childData.weight || 'N/A'} kg`, 'Age-appropriate'],
      ['Height', `${childData.height || 'N/A'} cm`, 'Age-appropriate'],
      ['BMI', this.calculateBMI(childData.weight, childData.height), '18.5-24.9 kg/m²']
    ];

    measurements.forEach((row, index) => {
      const currentY = y + (index * rowHeight);
      
      // Draw row background
      if (index === 0) {
        this.doc
          .fillColor('#f0f0f0')
          .rect(startX, currentY, tableWidth, rowHeight)
          .fill();
      }

      // Draw cells
      row.forEach((cell, cellIndex) => {
        const cellX = startX + (cellIndex * colWidth);
        
        // Draw border
        this.doc
          .rect(cellX, currentY, colWidth, rowHeight)
          .stroke('#ccc');

        // Add text
        this.doc
          .fillColor(index === 0 ? '#000' : '#333')
          .fontSize(index === 0 ? 12 : 11)
          .text(cell, cellX + 5, currentY + 8, {
            width: colWidth - 10,
            align: 'left'
          });
      });
    });
  }
}

module.exports = HealthBookletGenerator;