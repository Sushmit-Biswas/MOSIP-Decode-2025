import React from 'react';\nimport { \n  Search, \n  Filter, \n  Download, \n  Users, \n  TrendingUp, \n  Calendar, \n  MapPin, \n  BarChart3, \n  Eye,\n  FileText,\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  Globe\n} from 'lucide-react';\nimport childHealthDB from '../services/indexedDB';\nimport RecordDetailsModal from '../components/RecordDetailsModal';\nimport pdfService from '../services/pdfService';\nimport notificationService from '../services/notificationService';\n\nconst AdminPortal = () => {\n  const [records, setRecords] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n  const [filters, setFilters] = React.useState({\n    search: '',\n    dateFrom: '',\n    dateTo: '',\n    uploaded: '',\n    representative: ''\n  });\n  const [selectedRecord, setSelectedRecord] = React.useState(null);\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const [activeTab, setActiveTab] = React.useState('overview');\n  const [stats, setStats] = React.useState({\n    totalRecords: 0,\n    uploadedRecords: 0,\n    pendingRecords: 0,\n    representatives: new Set(),\n    averageBMI: 0,\n    underweightCount: 0,\n    normalWeightCount: 0,\n    overweightCount: 0,\n    malnutritionCases: 0,\n    recentIllnessCases: 0\n  });\n\n  React.useEffect(() => {\n    loadRecords();\n  }, []);\n\n  React.useEffect(() => {\n    calculateStats();\n  }, [records]);\n\n  const loadRecords = async () => {\n    setLoading(true);\n    try {\n      await childHealthDB.ensureDB();\n      const allRecords = await childHealthDB.getAllChildRecords();\n      setRecords(allRecords);\n    } catch (error) {\n      console.error('Failed to load records:', error);\n      notificationService.error('Failed to load records');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculateStats = () => {\n    if (records.length === 0) return;\n\n    const representatives = new Set(records.map(r => r.representativeId).filter(Boolean));\n    let totalBMI = 0;\n    let bmiCount = 0;\n    let underweight = 0;\n    let normal = 0;\n    let overweight = 0;\n    let malnutrition = 0;\n    let recentIllness = 0;\n\n    records.forEach(record => {\n      // BMI calculations\n      if (record.weight && record.height) {\n        const heightInM = record.height / 100;\n        const bmi = record.weight / (heightInM * heightInM);\n        totalBMI += bmi;\n        bmiCount++;\n\n        if (bmi < 18.5) underweight++;\n        else if (bmi < 25) normal++;\n        else overweight++;\n      }\n\n      // Health conditions\n      if (record.malnutritionSigns && record.malnutritionSigns !== 'N/A' && record.malnutritionSigns.trim() !== '') {\n        malnutrition++;\n      }\n      if (record.recentIllnesses && record.recentIllnesses !== 'N/A' && record.recentIllnesses.trim() !== '') {\n        recentIllness++;\n      }\n    });\n\n    setStats({\n      totalRecords: records.length,\n      uploadedRecords: records.filter(r => r.uploaded).length,\n      pendingRecords: records.filter(r => !r.uploaded).length,\n      representatives,\n      averageBMI: bmiCount > 0 ? (totalBMI / bmiCount).toFixed(1) : 0,\n      underweightCount: underweight,\n      normalWeightCount: normal,\n      overweightCount: overweight,\n      malnutritionCases: malnutrition,\n      recentIllnessCases: recentIllness\n    });\n  };\n\n  const filteredRecords = records.filter(record => {\n    let matches = true;\n    \n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      matches = matches && (\n        record.childName.toLowerCase().includes(searchLower) ||\n        record.parentName.toLowerCase().includes(searchLower) ||\n        record.healthId.toLowerCase().includes(searchLower)\n      );\n    }\n    \n    if (filters.dateFrom) {\n      matches = matches && new Date(record.timestamp) >= new Date(filters.dateFrom);\n    }\n    \n    if (filters.dateTo) {\n      matches = matches && new Date(record.timestamp) <= new Date(filters.dateTo);\n    }\n    \n    if (filters.uploaded !== '') {\n      matches = matches && (record.uploaded === (filters.uploaded === 'true'));\n    }\n    \n    if (filters.representative) {\n      matches = matches && record.representativeId === filters.representative;\n    }\n    \n    return matches;\n  });\n\n  const handleViewDetails = (record) => {\n    setSelectedRecord(record);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedRecord(null);\n  };\n\n  const handleDownloadSummary = async () => {\n    try {\n      const loadingToast = notificationService.loading('Generating summary report...');\n      const pdfBlob = await pdfService.generateSummaryReport(filteredRecords);\n      notificationService.dismiss(loadingToast);\n      \n      const url = window.URL.createObjectURL(pdfBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `child-health-summary-${new Date().toISOString().split('T')[0]}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      notificationService.success('Summary report downloaded successfully!');\n    } catch (error) {\n      console.error('PDF generation failed:', error);\n      notificationService.error('Failed to generate summary report.');\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  const StatCard = ({ title, value, icon: Icon, color = 'blue', subtitle = null }) => (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n          <p className={`text-3xl font-bold text-${color}-600`}>{value}</p>\n          {subtitle && <p className=\"text-sm text-gray-500 mt-1\">{subtitle}</p>}\n        </div>\n        <div className={`p-3 bg-${color}-100 rounded-full`}>\n          <Icon className={`h-8 w-8 text-${color}-600`} />\n        </div>\n      </div>\n    </div>\n  );\n\n  const TabButton = ({ id, label, icon: Icon, active, onClick }) => (\n    <button\n      onClick={() => onClick(id)}\n      className={`flex items-center space-x-2 px-4 py-2 rounded-lg font-medium transition-colors ${\n        active \n          ? 'bg-primary-100 text-primary-700 border border-primary-200' \n          : 'text-gray-600 hover:bg-gray-100'\n      }`}\n    >\n      <Icon className=\"h-4 w-4\" />\n      <span>{label}</span>\n    </button>\n  );\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary-600 to-primary-700 rounded-xl p-8 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Admin Dashboard</h1>\n            <p className=\"text-primary-100 mt-2\">Child Health Record Management System</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-primary-100\">Total Records</p>\n            <p className=\"text-4xl font-bold\">{stats.totalRecords}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"flex space-x-4 border-b border-gray-200 pb-4\">\n        <TabButton \n          id=\"overview\" \n          label=\"Overview\" \n          icon={BarChart3} \n          active={activeTab === 'overview'} \n          onClick={setActiveTab} \n        />\n        <TabButton \n          id=\"records\" \n          label=\"Records\" \n          icon={FileText} \n          active={activeTab === 'records'} \n          onClick={setActiveTab} \n        />\n        <TabButton \n          id=\"analytics\" \n          label=\"Analytics\" \n          icon={TrendingUp} \n          active={activeTab === 'analytics'} \n          onClick={setActiveTab} \n        />\n      </div>\n\n      {/* Overview Tab */}\n      {activeTab === 'overview' && (\n        <div className=\"space-y-8\">\n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <StatCard \n              title=\"Total Records\" \n              value={stats.totalRecords} \n              icon={FileText} \n              color=\"blue\" \n            />\n            <StatCard \n              title=\"Uploaded\" \n              value={stats.uploadedRecords} \n              icon={CheckCircle} \n              color=\"green\" \n              subtitle={`${((stats.uploadedRecords / stats.totalRecords) * 100 || 0).toFixed(1)}% of total`}\n            />\n            <StatCard \n              title=\"Pending Sync\" \n              value={stats.pendingRecords} \n              icon={Clock} \n              color=\"yellow\" \n              subtitle={`${((stats.pendingRecords / stats.totalRecords) * 100 || 0).toFixed(1)}% of total`}\n            />\n            <StatCard \n              title=\"Field Representatives\" \n              value={stats.representatives.size} \n              icon={Users} \n              color=\"purple\" \n            />\n          </div>\n\n          {/* Health Metrics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* BMI Distribution */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <Activity className=\"h-5 w-5 mr-2 text-green-600\" />\n                BMI Distribution\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Average BMI</span>\n                  <span className=\"font-semibold text-lg\">{stats.averageBMI} kg/m²</span>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-red-600\">Underweight</span>\n                    <span className=\"font-medium\">{stats.underweightCount}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-red-500 h-2 rounded-full\" \n                      style={{ width: `${(stats.underweightCount / stats.totalRecords) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-green-600\">Normal Weight</span>\n                    <span className=\"font-medium\">{stats.normalWeightCount}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-green-500 h-2 rounded-full\" \n                      style={{ width: `${(stats.normalWeightCount / stats.totalRecords) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-orange-600\">Overweight</span>\n                    <span className=\"font-medium\">{stats.overweightCount}</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div \n                      className=\"bg-orange-500 h-2 rounded-full\" \n                      style={{ width: `${(stats.overweightCount / stats.totalRecords) * 100}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Health Alerts */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n                <AlertTriangle className=\"h-5 w-5 mr-2 text-red-600\" />\n                Health Alerts\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-red-800\">Malnutrition Cases</span>\n                    <span className=\"text-xl font-bold text-red-900\">{stats.malnutritionCases}</span>\n                  </div>\n                  <p className=\"text-xs text-red-600 mt-1\">\n                    {((stats.malnutritionCases / stats.totalRecords) * 100 || 0).toFixed(1)}% of total records\n                  </p>\n                </div>\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-yellow-800\">Recent Illness Cases</span>\n                    <span className=\"text-xl font-bold text-yellow-900\">{stats.recentIllnessCases}</span>\n                  </div>\n                  <p className=\"text-xs text-yellow-600 mt-1\">\n                    {((stats.recentIllnessCases / stats.totalRecords) * 100 || 0).toFixed(1)}% of total records\n                  </p>\n                </div>\n                <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-blue-800\">Underweight Children</span>\n                    <span className=\"text-xl font-bold text-blue-900\">{stats.underweightCount}</span>\n                  </div>\n                  <p className=\"text-xs text-blue-600 mt-1\">\n                    Requires nutritional intervention\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Records Tab */}\n      {activeTab === 'records' && (\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center\">\n              <Filter className=\"h-5 w-5 mr-2\" />\n              Filters\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Search</label>\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    value={filters.search}\n                    onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}\n                    className=\"pl-10 form-input\"\n                    placeholder=\"Name or Health ID\"\n                  />\n                </div>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date From</label>\n                <input\n                  type=\"date\"\n                  value={filters.dateFrom}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Date To</label>\n                <input\n                  type=\"date\"\n                  value={filters.dateTo}\n                  onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}\n                  className=\"form-input\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Sync Status</label>\n                <select\n                  value={filters.uploaded}\n                  onChange={(e) => setFilters(prev => ({ ...prev, uploaded: e.target.value }))}\n                  className=\"form-input\"\n                >\n                  <option value=\"\">All</option>\n                  <option value=\"true\">Uploaded</option>\n                  <option value=\"false\">Pending</option>\n                </select>\n              </div>\n              <div className=\"flex items-end\">\n                <button\n                  onClick={handleDownloadSummary}\n                  className=\"w-full btn-primary flex items-center justify-center space-x-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  <span>Export PDF</span>\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Records Table */}\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Child Information\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Measurements\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Date\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredRecords.map((record) => {\n                    const bmi = record.weight && record.height \n                      ? (record.weight / Math.pow(record.height / 100, 2)).toFixed(1)\n                      : 'N/A';\n                    \n                    return (\n                      <tr key={record.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900\">{record.childName}</div>\n                            <div className=\"text-sm text-gray-500\">ID: {record.healthId}</div>\n                            <div className=\"text-sm text-gray-500\">Age: {record.age} years</div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"text-sm text-gray-900\">\n                            {record.weight}kg / {record.height}cm\n                          </div>\n                          <div className=\"text-sm text-gray-500\">BMI: {bmi}</div>\n                        </td>\n                        <td className=\"px-6 py-4 text-sm text-gray-500\">\n                          {formatDate(record.timestamp)}\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className={`px-2 py-1 text-xs font-medium rounded-full ${\n                            record.uploaded \n                              ? 'bg-green-100 text-green-800' \n                              : 'bg-yellow-100 text-yellow-800'\n                          }`}>\n                            {record.uploaded ? 'Uploaded' : 'Pending'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 text-sm font-medium\">\n                          <button\n                            onClick={() => handleViewDetails(record)}\n                            className=\"text-primary-600 hover:text-primary-900 mr-4\"\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n            \n            {filteredRecords.length === 0 && (\n              <div className=\"text-center py-12\">\n                <FileText className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No records found</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">Try adjusting your filters</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n\n      {/* Analytics Tab */}\n      {activeTab === 'analytics' && (\n        <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Age Distribution */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Age Distribution</h3>\n              <div className=\"space-y-3\">\n                {[0, 2, 5, 10, 15].map((minAge, index, arr) => {\n                  const maxAge = arr[index + 1] || 18;\n                  const count = records.filter(r => r.age >= minAge && r.age < maxAge).length;\n                  const percentage = (count / records.length) * 100 || 0;\n                  \n                  return (\n                    <div key={minAge} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600\">\n                        {minAge === 15 ? '15-18 years' : `${minAge}-${maxAge - 1} years`}\n                      </span>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-primary-500 h-2 rounded-full\" \n                            style={{ width: `${percentage}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium w-12 text-right\">{count}</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Representative Performance */}\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Representative Performance</h3>\n              <div className=\"space-y-3\">\n                {Array.from(stats.representatives).map((repId) => {\n                  const repRecords = records.filter(r => r.representativeId === repId);\n                  const uploaded = repRecords.filter(r => r.uploaded).length;\n                  \n                  return (\n                    <div key={repId} className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-600 truncate\">{repId}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-sm text-gray-500\">{uploaded}/{repRecords.length}</span>\n                        <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-green-500 h-2 rounded-full\" \n                            style={{ width: `${(uploaded / repRecords.length) * 100}%` }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Record Details Modal */}\n      <RecordDetailsModal\n        record={selectedRecord}\n        isOpen={isModalOpen}\n        onClose={handleCloseModal}\n      />\n    </div>\n  );\n};\n\nexport default AdminPortal;